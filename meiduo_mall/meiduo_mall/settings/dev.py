"""
Django settings for meiduo_mall project.

Generated by 'django-admin startproject' using Django 1.11.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""
import datetime
import os
import sys

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# sys.path: 项目运行时搜索包目录列表
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))
# print(sys.path)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '8x3dj=7x3w$=7*z!3dgb6697suelzafq3=^m!bo8gzm2+p4@aa'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['api.meiduo.site', '127.0.0.1', 'localhost']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    # 'meiduo_mall.apps.users.apps.UsersConfig',
    'users.apps.UsersConfig',
    'verifications.apps.VerificationsConfig',
    'oauth.apps.OauthConfig',
    'areas.apps.AreasConfig',
    'contents.apps.ContentsConfig',
    'goods.apps.GoodsConfig',
    'pictest.apps.PictestConfig',

    # 注册安装符文本编辑器
    'ckeditor',  # 富文本编辑器
    'ckeditor_uploader',  # 富文本编辑器上传图片模块
    'django_crontab',  # 定时任务
    # 搜索引擎的安装
    'haystack',
    'cart.apps.CartConfig',

]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

]

ROOT_URLCONF = 'meiduo_mall.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 增加template模板文件夹
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'meiduo_mall.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': "shopMall",
        "HOST": "127.0.0.1",
        "PORT": '3306',
        "USER": "turing",
        "PASSWORD": 'mysql',
    }
}

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'

# =================================================================
# =================================================================
# ================用户自定义设置=====================================
# =================================================================
# =================================================================


# Django框架缓存设置(如果不做设置，Django框架的默认缓存就是服务器内存)
# 此处是把Django框架的缓存设置为redis
# ======================链接cache的存储位置==========================
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "session": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    # 存储短信验证码内容
    "verify_codes": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/2",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    # 存储商品浏览记录内容
    "histories": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/4",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    # 存储购物车记录内容
    "cart": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/5",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}
# ================================================================


# 设置将session信息存储到缓存中(缓存已经设置为redis，所以session信息会存储到redis中)
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
# 指定session存储到缓存中空间名称
SESSION_CACHE_ALIAS = "session"

# ============Django框架的日志存储设置===============================
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # 是否禁用已经存在的日志器
    'formatters': {  # 日志信息显示的格式
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(module)s %(lineno)d %(message)s'
        },
    },
    'filters': {  # 对日志进行过滤
        'require_debug_true': {  # django在debug模式下才输出日志
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {  # 日志处理方法
        'console': {  # 向终端中输出日志
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {  # 向文件中输出日志
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(os.path.dirname(BASE_DIR), "logs/meiduo.log"),  # 日志文件的位置
            'maxBytes': 300 * 1024 * 1024,
            'backupCount': 10,
            'formatter': 'verbose'
        },
    },
    'loggers': {  # 日志器
        'django': {  # 定义了一个名为django的日志器
            'handlers': ['console', 'file'],  # 可以同时向终端与文件中输出日志
            'propagate': True,  # 是否继续传递日志信息
            'level': 'INFO',  # 日志器接收的最低日志级别
        },
    }
}

# 输出日志
# import logging
# logger = logging.getLogger('django')
# logger.info('INFO MESSAGE')

# =====================DRF框架=====================================
REST_FRAMEWORK = {
    # 指定DRF框架异常处理函数
    'EXCEPTION_HANDLER': 'meiduo_mall.utils.exceptions.exception_handler',
    # 认证机制设置
    'DEFAULT_AUTHENTICATION_CLASSES': (
        # 引入jwt扩展中的jwt认证机制，之后客户端传递了jwt token数据之后
        # jwt 认证机制会检验jwt token数据有效性，如果无效会直接返回401错误
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    #  ++++++++++++++++++++++++++++++++++分页++++++++++++++++++++++++++++++++++++++++++++++++
    'DEFAULT_PAGINATION_CLASS': 'meiduo_mall.utils.pagination.StandardResultPagination',
}

# ===================WT扩展配置=====================================
# JWT扩展配置
JWT_AUTH = {
    # 设置生成jwt token时，token有效时间
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=1),
    # 设置jwt扩展登录视图响应数据函数
    'JWT_RESPONSE_PAYLOAD_HANDLER':
        'users.utils.jwt_response_payload_handler',
}

# 指定Django认证系统所使用的模型类(Django认证系统会已经此模型类生成用户表)
AUTH_USER_MODEL = 'users.User'

# CORS跨域请求白名单设置
CORS_ORIGIN_WHITELIST = (
    '127.0.0.1:8080',
    'localhost:8080',
    'www.meiduo.site:8080',
)

CORS_ALLOW_CREDENTIALS = True  # 允许携带cookie

# 指定Django系统认证后端类
AUTHENTICATION_BACKENDS = ['users.utils.UsernameMobileAuthBackend']
# ===============================================================



# =====================QQ登陆的设置================================
# QQ 第三方登陆相关配置信息
# QQ_APP_ID = '101474184'
# QQ_APP_KEY = 'c6ce949e04e12ecc909ae6a8b09b637c'
# QQ_REDIRECT_URL = 'http://www.meiduo.site:8080/oauth_callback.html'


# 开发者应用的app
QQ_CLIENT_ID = '101474184'
# QQ开发者应用的appkey
QQ_CLIENT_SECRET = 'c6ce949e04e12ecc909ae6a8b09b637c'
# Qq回调的地址
QQ_REDIRECT_URI = 'http://www.meiduo.site:8080/oauth_callback.html'
# qq登陆成功之后的跳转页面，默认跳转到首页
QQ_STATE = '/'
# ==============================================================



# ======================邮件发送的设置=--=========================
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# 邮箱服务器的地址
EMAIL_HOST = 'smtp.163.com'

# SMTP服务器的端口号
EMAIL_PORT = 25

# 发送邮件的邮箱
EMAIL_HOST_USER = 'yonglonggeng@163.com'
# 在邮箱中设置的客户端授权密码
EMAIL_HOST_PASSWORD = 'turing'
# 收件人看到的发件人
EMAIL_FROM = 'turing的美多商城<yonglonggeng@163.com>'
# ============================================================



# ===============缓存的扩展配置文件=============================
# DRF扩展
REST_FRAMEWORK_EXTENSIONS = {
    # 缓存时间
    'DEFAULT_CACHE_RESPONSE_TIMEOUT': 60 * 60,
    # 缓存存储
    'DEFAULT_USE_CACHE': 'default',
}
# /============================================================


# =======================FDFS设置================================
FDFS_CLIENT_CONF = os.path.join(BASE_DIR, 'utils/fastdfs/client.conf')

# FDFS_URL = "htt://192.168.191.133:8888/"
# host文件设置192.168.191.133 image.meiduo.site
FDFS_URL = "http://iamge.meiduo.site:8888/"

# 指定django框架所使用的问价存储类

DEFAULT_FILE_STORAGE = 'meiduo_mall.utils.fastdfs.fdfs_storage.FDFStorage'

# ==========================================================================




# ===================================CK符文本编辑器===========================
# 富文本编辑器ckeditor配置
CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'full',  # 工具条功能
        'height': 300,  # 编辑器高度
        # 'width': 300,  # 编辑器宽
    },
}
CKEDITOR_UPLOAD_PATH = ''  # 上传图片保存路径，使用了FastDFS，所以此处设为''
# 一定要设置，不能省略，胜率会使用默认的
# ============================================================================


# ============================================指定生成静态文件保存路劲=================
# GENERATED_STATIC_HTML_FILES_DIR=os.path.join(os.path.dirname(os.path.dirname(BASE_DIR)),'font_end_pc')

GENERATED_STATIC_HTML_FILES_DIR = os.path.join(os.path.dirname(os.path.dirname(BASE_DIR)), 'front_end_pc')

# ====================crontab定时任务的设置=================================

# ×××××
# 分时日月周
# 定时任务
CRONJOBS = [
    # 每5分钟执行一次生成主页静态文件
    (
        '*/5 * * * *', 'contents.crons.generate_static_index_html',
        '>> ' + os.path.dirname(BASE_DIR) + '/logs/crontab.log')
]
# 解决crontab中文问题
CRONTAB_COMMAND_PREFIX = 'LANG_ALL=zh_cn.UTF-8'

# ===============================================================


# =====================================全文检索的配置==========================
# Haystack
HAYSTACK_CONNECTIONS = {
    'default': {
        # 指定全文检索框架所使用的搜索引擎
        'ENGINE': 'haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine',
        # 指定搜索引擎的服务器和ip和端口
        'URL': 'http://192.168.191.141:9200/',  # 此处为elasticsearch运行的服务器ip地址，端口号固定为9200
        'INDEX_NAME': 'meiduo_turing',  # 指定elasticsearch建立的索引库的名称
    },
}

# 当添加、修改、删除数据时，自动生成索引
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++


# 允许跨域请求
CORS_ALLOW_CREDENTIALS = True